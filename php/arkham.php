<?php

namespace ccxt;

// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code

use Exception; // a common import
use ccxt\abstract\arkham as Exchange;

class arkham extends Exchange {

    public function describe(): mixed {
        return $this->deep_extend(parent::describe(), array(
            'id' => 'arkham',
            'name' => 'ARKHAM',
            'countries' => array( 'US' ),
            'version' => 'v1',
            'rateLimit' => 20 / 3, // 150 req/s
            'certified' => false,
            'pro' => true,
            'has' => array(
                'CORS' => false,
                'spot' => true,
                'margin' => false,
                'swap' => true,
                'future' => false,
                'option' => false,
                'cancelAllOrders' => true,
                'cancelOrder' => true,
                'createDepositAddress' => true,
                'createOrder' => true,
                'fetchAccounts' => true,
                'fetchBalance' => true,
                'fetchClosedOrders' => true,
                'fetchCurrencies' => true,
                'fetchDepositAddress' => false,
                'fetchDepositAddressesByNetwork' => true,
                'fetchDeposits' => true,
                'fetchFundingHistory' => true,
                'fetchLeverage' => true,
                'fetchLeverageTiers' => true,
                'fetchMyTrades' => true,
                'fetchOHLCV' => true,
                'fetchOpenOrders' => true,
                'fetchOrder' => true,
                'fetchOrderBook' => true,
                'fetchPositions' => true,
                'fetchTicker' => true,
                'fetchTickers' => true,
                'fetchTime' => true,
                'fetchTrades' => true,
                'fetchTradingFees' => true,
                'fetchWithdrawals' => true,
                'sandbox' => false,
                'setLeverage' => true,
                'withdraw' => true,
            ),
            'timeframes' => array(
                // enums are wrong in DOCS, these string values need to be in request
                '1m' => '1m',
                '5m' => '5m',
                '15m' => '15m',
                '30m' => '30m',
                '1h' => '1h',
                '6h' => '6h',
                '1d' => '24h',
            ),
            'urls' => array(
                'logo' => 'https://github.com/user-attachments/assets/5cefdcfb-2c10-445b-835c-fa21317bf5ac',
                'api' => array(
                    'v1' => 'https://arkm.com/api',
                ),
                'www' => 'https://arkm.com/',
                'referral' => array(
                    'url' => 'https://arkm.com/register?ref=ccxt',
                    'discount' => 0,
                ),
                'doc' => array(
                    'https://arkm.com/limits-api',
                    'https://info.arkm.com/api-platform',
                ),
                'fees' => 'https://arkm.com/fees',
            ),
            'api' => array(
                'v1' => array(
                    'public' => array(
                        'get' => array(
                            'alerts' => 1,
                            'announcements' => 1,
                            'assets' => 1,
                            'book' => 1,
                            'candles' => 1,
                            'chains' => 1,
                            'contracts' => 1,
                            'index-price' => 1,
                            'index-prices' => 1,
                            'margin-schedules' => 1,
                            'marketcapchart' => 1,
                            'marketcaps' => 1,
                            'pair' => 1,
                            'pairs' => 1,
                            'server-time' => 1,
                            'ticker' => 1,
                            'tickers' => 1,
                            'trades' => 1,
                        ),
                    ),
                    'private' => array(
                        // for orders => spot 20/s, todo => perp 40/s
                        'get' => array(
                            'user' => 7.5,
                            'orders' => 7.5,
                            'orders/by-client-order-id' => 7.5,
                            'orders/history' => 7.5,
                            'orders/history/by-client-order-id' => 7.5,
                            'orders/history_offset' => 7.5,
                            'orders/{id}' => 7.5,
                            'trades' => 7.5,
                            'trades/history' => 7.5,
                            'trades/time' => 7.5,
                            'trigger-orders' => 7.5,
                            'account/airdrops' => 7.5,
                            'account/balance-updates' => 7.5,
                            'account/balances' => 7.5,
                            'account/balances/ll' => 7.5,
                            'account/balances/history' => 7.5,
                            'account/balances/commissions' => 7.5,
                            'account/deposit/addresses' => 7.5,
                            'account/deposits' => 7.5,
                            'account/fees' => 7.5,
                            'account/funding-rate-payments' => 7.5,
                            'account/leverage' => 7.5,
                            'account/lsp-assignments' => 7.5,
                            'account/margin' => 7.5,
                            'account/margin/all' => 7.5,
                            'account/notifications' => 7.5,
                            'account/position-updates' => 7.5,
                            'account/positions' => 7.5,
                            'account/realized-pnl' => 7.5,
                            'account/rebates' => 7.5,
                            'account/referral-links' => 7.5,
                            'account/sessions' => 7.5,
                            'account/settings' => 7.5,
                            'account/settings/price-alert' => 7.5,
                            'account/transfers' => 7.5,
                            'account/unsubscribe' => 7.5,
                            'account/watchlist' => 7.5,
                            'account/withdrawal/addresses' => 7.5,
                            'account/withdrawal/addresses/{id}' => 7.5,
                            'account/withdrawals' => 7.5,
                            'subaccounts' => 7.5,
                            'airdrop' => 7.5,
                            'airdrop/claim' => 7.5,
                            'affiliate-dashboard/commission-earned' => 7.5,
                            'affiliate-dashboard/min-arkm-last-30d' => 7.5,
                            'affiliate-dashboard/points' => 7.5,
                            'affiliate-dashboard/points-season-1' => 7.5,
                            'affiliate-dashboard/points-season-2' => 7.5,
                            'affiliate-dashboard/realized-pnl' => 7.5,
                            'affiliate-dashboard/rebate-balance' => 7.5,
                            'affiliate-dashboard/referral-count' => 7.5,
                            'affiliate-dashboard/referrals-season-1' => 7.5,
                            'affiliate-dashboard/referrals-season-2' => 7.5,
                            'affiliate-dashboard/trading-volume-stats' => 7.5,
                            'affiliate-dashboard/volume-season-1' => 7.5,
                            'affiliate-dashboard/volume-season-2' => 7.5,
                            'affiliate-dashboard/api-key' => 7.5,
                            'competitions/opt-in-status' => 7.5,
                            'rewards/info' => 7.5,
                            'rewards/vouchers' => 7.5,
                        ),
                        'post' => array(
                            'orders/new' => 7.5,
                            'trigger-orders/new' => 7.5,
                            'orders/cancel' => 7.5,
                            'trigger-orders/cancel' => 7.5,
                            'orders/cancel/all' => 7.5,
                            'trigger-orders/cancel/all' => 7.5,
                            'orders/new/simple' => 7.5,
                            'account/deposit/addresses/new' => 7.5,
                            'account/leverage' => 7.5,
                            'account/notifications/read' => 7.5,
                            'account/referral-links' => 7.5,
                            'account/sessions/delete' => 7.5,
                            'account/sessions/terminate-all' => 7.5,
                            'account/settings/update' => 7.5,
                            'account/watchlist/add' => 7.5,
                            'account/watchlist/remove' => 7.5,
                            'account/withdraw' => 7.5,
                            'account/withdrawal/addresses/confirm' => 7.5,
                            'subaccounts' => 7.5,
                            'subaccounts/transfer' => 7.5,
                            'subaccounts/perp-transfer' => 7.5,
                            'subaccounts/update-settings' => 7.5,
                            'airdrop' => 7.5,
                            'api-key/create' => 7.5,
                            'authenticate' => 7.5,
                            'competitions/opt-in' => 7.5,
                            'rewards/vouchers/claim' => 7.5,
                        ),
                        'put' => array(
                            'account/referral-links/{id}/slug' => 7.5,
                            'account/settings/price-alert' => 7.5,
                            'account/withdrawal/addresses/{id}' => 7.5,
                            'subaccounts' => 7.5,
                            'api-key/update/{id}' => 7.5,
                        ),
                        'delete' => array(
                            'account/settings/price-alert' => 7.5,
                            'account/withdrawal/addresses/{id}' => 7.5,
                            'subaccounts/{subaccountId}' => 7.5,
                            'api-key/{id}' => 7.5,
                        ),
                    ),
                ),
            ),
            'options' => array(
                'networks' => array(
                    'ETH' => 'ETH',
                    'ERC20' => 'ETH',
                    'BTC' => 'BTC',
                    'SOL' => 'SOL',
                    'TON' => 'TON',
                    'DOGE' => 'DOGE',
                    'SUI' => 'SUI',
                    'XRP' => 'XRP',
                    'OP' => 'OP',
                    'AVAXC' => 'AVAX',
                    'ARBONE' => 'ARB',
                ),
                'networksById' => array(
                    'ETH' => 'ERC20',
                    'ERC20' => 'ERC20',
                ),
                'requestExpiration' => 5000, // 5 seconds
                'timeframeDurations' => array(
                    '1m' => 60000000,
                    '5m' => 300000000,
                    '15m' => 900000000,
                    '30m' => 1800000000,
                    '1h' => 3600000000,
                    '6h' => 21600000000,
                    '1d' => 86400000000,
                ),
            ),
            'features' => array(
                'default' => array(
                    'sandbox' => false,
                    'createOrder' => array(
                        'marginMode' => false,
                        'triggerPrice' => true,
                        'triggerPriceType' => array(
                            'mark' => true,
                            'index' => true,
                            'last' => true,
                        ),
                        'triggerDirection' => true,
                        'stopLossPrice' => true,
                        'takeProfitPrice' => true,
                        'attachedStopLossTakeProfit' => null,
                        'timeInForce' => array(
                            'IOC' => true,
                            'FOK' => true,
                            'PO' => true,
                            'GTD' => false,
                        ),
                        'hedged' => false,
                        'selfTradePrevention' => false,
                        'trailing' => false,
                        'iceberg' => false,
                        'leverage' => false,
                        'marketBuyByCost' => false,
                        'marketBuyRequiresPrice' => false,
                    ),
                    'createOrders' => null,
                    'fetchMyTrades' => array(
                        'marginMode' => false,
                        'limit' => 100,
                        'daysBack' => null,
                        'untilDays' => 1,
                        'symbolRequired' => false,
                    ),
                    'fetchOrder' => array(
                        'marginMode' => false,
                        'trigger' => false,
                        'trailing' => false,
                        'symbolRequired' => false,
                    ),
                    'fetchOpenOrders' => array(
                        'marginMode' => true,
                        'limit' => null,
                        'trigger' => false,
                        'trailing' => false,
                        'symbolRequired' => false,
                    ),
                    'fetchOrders' => null,
                    'fetchClosedOrders' => array(
                        'marginMode' => false,
                        'limit' => 100,
                        'daysBack' => null,
                        'daysBackCanceled' => null,
                        'untilDays' => null,
                        'trigger' => false,
                        'trailing' => false,
                        'symbolRequired' => false,
                    ),
                    'fetchOHLCV' => array(
                        'limit' => 365,
                    ),
                ),
                'spot' => array(
                    'extends' => 'default',
                ),
                'swap' => array(
                    'linear' => array(
                        'extends' => 'default',
                    ),
                    'inverse' => null,
                ),
                'future' => array(
                    'linear' => array(
                        'extends' => 'default',
                    ),
                    'inverse' => null,
                ),
            ),
            'precisionMode' => TICK_SIZE,
            'exceptions' => array(
                'exact' => array(
                    // 1XXXX General Errors
                    // These errors can occur for a variety of reasons and may be returned by the API or Websocket on any endpoint.
                    '10000' => '\\ccxt\\OperationFailed',
                    '10001' => '\\ccxt\\BadRequest',
                    '10002' => '\\ccxt\\AuthenticationError',
                    '10003' => '\\ccxt\\BadSymbol',
                    '10004' => '\\ccxt\\ArgumentsRequired',
                    '10005' => '\\ccxt\\RateLimitExceeded',
                    '10006' => '\\ccxt\\PermissionDenied',
                    '10007' => '\\ccxt\\PermissionDenied',
                    '10008' => '\\ccxt\\RateLimitExceeded',
                    '10009' => '\\ccxt\\PermissionDenied',
                    '10010' => '\\ccxt\\PermissionDenied',
                    '10011' => '\\ccxt\\AuthenticationError',
                    '10012' => '\\ccxt\\PermissionDenied',
                    '10013' => '\\ccxt\\PermissionDenied',
                    '10014' => '\\ccxt\\AuthenticationError',
                    '10015' => '\\ccxt\\PermissionDenied',
                    '10016' => '\\ccxt\\PermissionDenied',
                    '10017' => '\\ccxt\\PermissionDenied',
                    '10018' => '\\ccxt\\AuthenticationError',
                    '10019' => '\\ccxt\\AuthenticationError',
                    '10020' => '\\ccxt\\PermissionDenied',
                    '10021' => '\\ccxt\\PermissionDenied',
                    '10022' => '\\ccxt\\ExchangeError',
                    '10023' => '\\ccxt\\BadRequest',
                    '10024' => '\\ccxt\\ExchangeError',
                    '10025' => '\\ccxt\\BadRequest',
                    // #2XXXX General Websocket Errors
                    '20001' => '\\ccxt\\BadRequest',
                    '20002' => '\\ccxt\\ArgumentsRequired',
                    '20003' => '\\ccxt\\BadRequest',
                    '20004' => '\\ccxt\\ArgumentsRequired',
                    '20005' => '\\ccxt\\BadRequest',
                    // #3XXXX Trading Errors
                    '30001' => '\\ccxt\\InvalidOrder',
                    '30002' => '\\ccxt\\InvalidOrder',
                    '30003' => '\\ccxt\\InvalidOrder',
                    '30004' => '\\ccxt\\InvalidOrder',
                    '30005' => '\\ccxt\\InvalidOrder',
                    '30006' => '\\ccxt\\InvalidOrder',
                    '30007' => '\\ccxt\\BadSymbol',
                    '30008' => '\\ccxt\\OperationRejected',
                    '30009' => '\\ccxt\\OperationRejected',
                    '30010' => '\\ccxt\\InsufficientFunds',
                    '30011' => '\\ccxt\\BadSymbol',
                    '30012' => '\\ccxt\\OperationRejected',
                    '30013' => '\\ccxt\\OperationRejected',
                    '30014' => '\\ccxt\\InvalidOrder',
                    '30015' => '\\ccxt\\OrderNotFound',
                    '30016' => '\\ccxt\\InvalidOrder',
                    '30017' => '\\ccxt\\InvalidOrder',
                    '30018' => '\\ccxt\\InvalidOrder',
                    '30019' => '\\ccxt\\OperationRejected',
                    '30020' => '\\ccxt\\InvalidOrder',
                    '30021' => '\\ccxt\\InvalidOrder',
                    '30022' => '\\ccxt\\InvalidOrder',
                    '30023' => '\\ccxt\\InvalidOrder',
                    '30024' => '\\ccxt\\InvalidOrder',
                    '30025' => '\\ccxt\\BadRequest',
                    '30026' => '\\ccxt\\PermissionDenied',
                    '30027' => '\\ccxt\\PermissionDenied',
                    '30028' => '\\ccxt\\OrderNotFound',
                    // #4XXXX Funding Errors
                    '40001' => '\\ccxt\\OperationRejected',
                    '40002' => '\\ccxt\\BadRequest',
                    '40003' => '\\ccxt\\InvalidAddress',
                    '40004' => '\\ccxt\\OperationRejected',
                    '40005' => '\\ccxt\\BadRequest',
                    '40006' => '\\ccxt\\PermissionDenied',
                    '40007' => '\\ccxt\\OperationRejected',
                    '40008' => '\\ccxt\\OperationRejected',
                    '40009' => '\\ccxt\\OperationRejected',
                    '40010' => '\\ccxt\\BadRequest',
                    '40011' => '\\ccxt\\OperationRejected',
                    '40012' => '\\ccxt\\BadRequest',
                    '40013' => '\\ccxt\\BadRequest',
                    // #9XXXX Other Errors
                    '90001' => '\\ccxt\\BadRequest',
                    '90002' => '\\ccxt\\BadRequest',
                    '90003' => '\\ccxt\\OperationRejected',
                    '90004' => '\\ccxt\\BadRequest',
                    '90005' => '\\ccxt\\BadRequest',
                    '90006' => '\\ccxt\\RateLimitExceeded',
                    '90007' => '\\ccxt\\AuthenticationError',
                    '90008' => '\\ccxt\\RateLimitExceeded',
                    '90009' => '\\ccxt\\PermissionDenied',
                    '90010' => '\\ccxt\\BadRequest',
                    '90011' => '\\ccxt\\RateLimitExceeded',
                ),
                'broad' => array(
                    'less than min withdrawal ' => '\\ccxt\\OperationRejected', // array("message":"amount 1 less than min withdrawal 5")
                ),
            ),
        ));
    }

    public function fetch_currencies($params = array ()): ?array {
        /**
         * fetches all available currencies on an exchange
         *
         * @see https://arkm.com/docs#get/public/assets
         *
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @return {array} an associative dictionary of currencies
         */
        $response = $this->v1PublicGetAssets ($params);
        //
        //    array(
        //        {
        //            "symbol" => "USDT",
        //            "name" => "Tether",
        //            "imageUrl" => "https://static.arkhamintelligence.com/tokens/tether.png",
        //            "stablecoin" => true,
        //            "featuredPair" => "BTC_USDT",
        //            "chains" => [
        //                array(
        //                    "symbol" => "ETH",
        //                    "assetSymbol" => "ETH",
        //                    "name" => "Ethereum",
        //                    "type" => "1",
        //                    "confirmations" => "6",
        //                    "blockTime" => "12000000"
        //                }
        //            ),
        //            "status" => "listed",
        //            "minDeposit" => "5",
        //            "minWithdrawal" => "5",
        //            "withdrawalFee" => "2"
        //        ),
        //        ...
        //
        $result = array();
        for ($i = 0; $i < count($response); $i++) {
            $currency = $response[$i];
            $id = $this->safe_string($currency, 'symbol');
            $code = $this->safe_currency_code($id);
            $networks = array();
            $chains = $this->safe_list($currency, 'chains', array());
            for ($j = 0; $j < count($chains); $j++) {
                $chain = $chains[$j];
                $networkId = $this->safe_string($chain, 'symbol');
                $network = $this->network_id_to_code($networkId);
                $networks[$network] = array(
                    'info' => $chain,
                    'id' => $networkId,
                    'network' => $network,
                    'title' => $this->safe_string($chain, 'name'),
                    'active' => null,
                    'deposit' => null,
                    'withdraw' => null,
                    'fee' => null,
                    'precision' => null,
                    'limits' => array(
                        'withdraw' => array(
                            'min' => null,
                            'max' => null,
                        ),
                    ),
                );
            }
            $result[$code] = $this->safe_currency_structure(array(
                'info' => $currency,
                'id' => $id,
                'code' => $code,
                'name' => $this->safe_string($currency, 'name'),
                'active' => $this->safe_string($currency, 'status') === 'listed',
                'deposit' => null,
                'withdraw' => null,
                'fee' => $this->safe_number($currency, 'withdrawalFee'),
                'precision' => null,
                'limits' => array(
                    'amount' => array(
                        'min' => null,
                        'max' => null,
                    ),
                    'withdraw' => array(
                        'min' => $this->safe_number($currency, 'minWithdrawal'),
                        'max' => null,
                    ),
                    'deposit' => array(
                        'min' => $this->safe_number($currency, 'minDeposit'),
                        'max' => null,
                    ),
                ),
                'type' => 'crypto',
                'networks' => $networks,
            ));
        }
        return $result;
    }

    public function fetch_markets($params = array ()): array {
        /**
         *
         * @see https://arkm.com/docs#get/public/pairs
         *
         * retrieves data on all markets for arkm
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @return {array[]} an array of objects representing $market data
         */
        $response = $this->v1PublicGetPairs ($params);
        //
        //    [
        //        array(
        //            "symbol" => "BTC_USDT",
        //            "baseSymbol" => "BTC",
        //            "baseImageUrl" => "https://static.arkhamintelligence.com/tokens/bitcoin.png",
        //            "baseIsStablecoin" => false,
        //            "baseName" => "Bitcoin",
        //            "quoteSymbol" => "USDT",
        //            "quoteImageUrl" => "https://static.arkhamintelligence.com/tokens/tether.png",
        //            "quoteIsStablecoin" => true,
        //            "quoteName" => "Tether",
        //            "minTickPrice" => "0.01",
        //            "minLotSize" => "0.00001",
        //            "minSize" => "0.00001",
        //            "maxSize" => "9000",
        //            "minPrice" => "0.01",
        //            "maxPrice" => "1000000",
        //            "minNotional" => "5",
        //            "maxPriceScalarUp" => "1.8",
        //            "maxPriceScalarDown" => "0.2",
        //            "pairType" => "spot", // atm, always 'spot' value
        //            "maxLeverage" => "0",
        //            "status" => "listed"
        //        ),
        //        array(
        //            "symbol" => "BTC_USDT_PERP",
        //            "baseSymbol" => "BTC.P",
        //            "baseImageUrl" => "https://static.arkhamintelligence.com/tokens/bitcoin.png",
        //            "baseIsStablecoin" => false,
        //            "baseName" => "Bitcoin Perpetual",
        //            "quoteSymbol" => "USDT",
        //            "quoteImageUrl" => "https://static.arkhamintelligence.com/tokens/tether.png",
        //            "quoteIsStablecoin" => true,
        //            "quoteName" => "Tether",
        //            "minTickPrice" => "0.01",
        //            "minLotSize" => "0.00001",
        //            "minSize" => "0.00001",
        //            "maxSize" => "9000",
        //            "minPrice" => "0.01",
        //            "maxPrice" => "1000000",
        //            "minNotional" => "5",
        //            "maxPriceScalarUp" => "1.5",
        //            "maxPriceScalarDown" => "0.5",
        //            "pairType" => "perpetual",
        //            "marginSchedule" => "C",
        //            "maxLeverage" => "25",
        //            "status" => "listed"
        //        ),
        //        ...
        //
        $result = array();
        for ($i = 0; $i < count($response); $i++) {
            $market = $response[$i];
            $id = $this->safe_string($market, 'symbol');
            $baseId = $this->safe_string($market, 'baseSymbol');
            $quoteId = $this->safe_string($market, 'quoteSymbol');
            $base = $this->safe_currency_code($baseId);
            $quote = $this->safe_currency_code($quoteId);
            $marketType = null;
            $symbol = null;
            $pairType = $this->safe_string($market, 'pairType');
            $isSpot = $pairType === 'spot';
            $isPerpetual = $pairType === 'perpetual';
            $settle = null;
            $settleId = null;
            if ($isSpot) {
                $marketType = 'spot';
                $symbol = $base . '/' . $quote;
            } elseif ($isPerpetual) {
                $marketType = 'swap';
                $base = str_replace('.P', '', $base);
                $settle = $quote;
                $settleId = $quoteId;
                $symbol = $base . '/' . $quote . ':' . $settle;
            }
            $result[] = array(
                'id' => $id,
                'symbol' => $symbol,
                'base' => $base,
                'quote' => $quote,
                'settle' => $settle,
                'baseId' => $baseId,
                'quoteId' => $quoteId,
                'settleId' => $settleId,
                'type' => $marketType,
                'spot' => $isSpot,
                'margin' => null,
                'swap' => $isPerpetual,
                'future' => false,
                'option' => false,
                'active' => $this->safe_string($market, 'status') === 'listed',
                'contract' => $isPerpetual,
                'linear' => $isPerpetual ? true : null,
                'inverse' => $isPerpetual ? false : null,
                'contractSize' => $isSpot ? null : 1, // seems 1 per fetchTrades
                'expiry' => null,
                'expiryDatetime' => null,
                'strike' => null,
                'optionType' => null,
                'precision' => array(
                    'price' => $this->safe_number($market, 'minTickPrice'),
                    'amount' => $this->safe_number($market, 'minLotSize'),
                ),
                'limits' => array(
                    'leverage' => array(
                        'min' => null,
                        'max' => null,
                    ),
                    'amount' => array(
                        'min' => $this->safe_number($market, 'minSize'),
                        'max' => $this->safe_number($market, 'maxSize'),
                    ),
                    'price' => array(
                        'min' => $this->safe_number($market, 'minPrice'),
                        'max' => $this->safe_number($market, 'maxPrice'),
                    ),
                    'cost' => array(
                        'min' => $this->safe_number($market, 'minNotional'),
                        'max' => null,
                    ),
                ),
                'created' => null,
                'info' => $market,
            );
        }
        return $result;
    }

    public function fetch_time($params = array ()) {
        /**
         * fetches the current integer timestamp in milliseconds from the exchange server
         *
         * @see https://arkm.com/docs#get/public/server-time
         *
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @return {int} the current integer timestamp in milliseconds from the exchange server
         */
        $response = $this->v1PublicGetServerTime ($params);
        //
        //    {
        //        "serverTime" => "1753465832770820"
        //    }
        //
        return $this->safe_integer_product($response, 'serverTime', 0.001);
    }

    public function fetch_order_book(string $symbol, ?int $limit = null, $params = array ()): array {
        /**
         * fetches information on open orders with bid (buy) and ask (sell) prices, volumes and other data
         *
         * @see https://arkm.com/docs#get/public/book
         *
         * @param {string} $symbol unified $symbol of the $market to fetch the order book for
         * @param {int} [$limit] the number of order book entries to return, max 50
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @return {array} A dictionary of ~@link https://docs.ccxt.com/#/?id=order-book-structure order book structures~ indexed by $market symbols
         */
        $this->load_markets();
        $market = $this->market($symbol);
        $request = array(
            'symbol' => $market['id'],
        );
        if ($limit !== null) {
            $request['limit'] = $limit;
        }
        $response = $this->v1PublicGetBook ($this->extend($request, $params));
        //
        //    {
        //        "symbol" => "BTC_USDT",
        //        "group" => "0.01",
        //        "asks" => array(
        //            array(
        //                "price" => "122900.43",
        //                "size" => "0.0243"
        //            ),
        //            array(
        //                "price" => "121885.53",
        //                "size" => "0.00116"
        //            ),
        //            ...
        //        ),
        //        "bids" => array(
        //            array(
        //                "price" => "20400",
        //                "size" => "0.00316"
        //            ),
        //            array(
        //                "price" => "30000",
        //                "size" => "0.00116"
        //            ),
        //            ...
        //        ),
        //        "lastTime" => "1753419275604353"
        //    }
        //
        $timestamp = $this->safe_integer_product($response, 'lastTime', 0.001);
        $marketId = $this->safe_string($response, 'symbol');
        return $this->parse_order_book($response, $this->safe_symbol($marketId, $market), $timestamp, 'bids', 'asks', 'price', 'size');
    }

    public function fetch_ohlcv(string $symbol, $timeframe = '1m', ?int $since = null, ?int $limit = null, $params = array ()): array {
        /**
         * fetches historical candlestick data containing the open, high, low, and close price, and the volume of a $market
         *
         * @see https://arkm.com/docs#get/public/candles
         *
         * @param {string} $symbol unified $symbol of the $market to fetch OHLCV data for
         * @param {string} $timeframe the length of time each candle represents
         * @param {int} [$since] timestamp in ms of the earliest candle to fetch
         * @param {int} [$limit] the maximum amount of candles to fetch
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @param {int} [$params->until] timestamp in ms for the ending date filter, default is the current time
         * @param {boolean} [$params->paginate] default false, when true will automatically $paginate by calling this endpoint multiple times. See in the docs all the [availble parameters](https://github.com/ccxt/ccxt/wiki/Manual#pagination-$params)
         * @return {int[][]} A list of candles ordered, open, high, low, close, volume
         */
        $maxLimit = 365;
        $this->load_markets();
        $paginate = false;
        list($paginate, $params) = $this->handle_option_and_params($params, 'fetchOHLCV', 'paginate', false);
        if ($paginate) {
            return $this->fetch_paginated_call_deterministic('fetchOHLCV', $symbol, $since, $limit, $timeframe, $params, $maxLimit);
        }
        $market = $this->market($symbol);
        $request = array(
            'symbol' => $market['id'],
            'duration' => $this->safe_string($this->timeframes, $timeframe, $timeframe),
        );
        $durationMs = $this->parse_timeframe($timeframe) * 1000;
        $until = $this->safe_integer($params, 'until');
        $params = $this->omit($params, array( 'until' ));
        $selectedLimit = ($limit !== null) ? min ($limit, $maxLimit) : $maxLimit;
        if ($since !== null) {
            $request['start'] = $since;
            $request['end'] = $this->sum($since, $selectedLimit * $durationMs);
        } else {
            $now = $this->milliseconds();
            $request['end'] = ($until !== null) ? $until : $now;
            $request['start'] = $request['end'] - $selectedLimit * $durationMs;
        }
        // exchange needs microseconds
        $request['start'] = $request['start'] * 1000;
        $request['end'] = $request['end'] * 1000;
        $response = $this->v1PublicGetCandles ($this->extend($request, $params));
        //
        //    array(
        //        array(
        //            "symbol" => "BTC_USDT_PERP",
        //            "time" => "1753464720000000",
        //            "duration" => "60000000",
        //            "open" => "116051.35",
        //            "high" => "116060.27",
        //            "low" => "116051.35",
        //            "close" => "116060.27",
        //            "volume" => "0.0257",
        //            "quoteVolume" => "2982.6724054"
        //        ),
        //        ...
        //    )
        //
        return $this->parse_ohlcvs($response, $market, $timeframe, $since, $limit);
    }

    public function parse_ohlcv($ohlcv, ?array $market = null): array {
        //
        //        {
        //            "symbol" => "BTC_USDT_PERP",
        //            "time" => "1753464720000000",
        //            "duration" => "60000000",
        //            "open" => "116051.35",
        //            "high" => "116060.27",
        //            "low" => "116051.35",
        //            "close" => "116060.27",
        //            "volume" => "0.0257",
        //            "quoteVolume" => "2982.6724054"
        //        }
        //
        return array(
            $this->safe_integer_product($ohlcv, 'time', 0.001),
            $this->safe_number($ohlcv, 'open'),
            $this->safe_number($ohlcv, 'high'),
            $this->safe_number($ohlcv, 'low'),
            $this->safe_number($ohlcv, 'close'),
            $this->safe_number($ohlcv, 'volume'),
        );
    }

    public function fetch_tickers(?array $symbols = null, $params = array ()): array {
        $response = $this->v1PublicGetTickers ($params);
        //
        //    [
        //        array(
        //            "symbol" => "BTC_USDT_PERP",
        //            "baseSymbol" => "BTC.P",
        //            "quoteSymbol" => "USDT",
        //            "indexCurrency" => "USDT",
        //            "price" => "118806.89",
        //            "price24hAgo" => "118212.29",
        //            "high24h" => "119468.05",
        //            "low24h" => "117104.44",
        //            "volume24h" => "180.99438",
        //            "quoteVolume24h" => "21430157.5928827",
        //            "markPrice" => "118814.71",
        //            "indexPrice" => "118804.222610343",
        //            "fundingRate" => "0.000007",
        //            "nextFundingRate" => "0.000006",
        //            "nextFundingTime" => "1753390800000000",
        //            "productType" => "perpetual",
        //            "openInterest" => "2.55847",
        //            "usdVolume24h" => "21430157.5928827",
        //            "openInterestUSD" => "303963.8638583"
        //        ),
        //        ...
        //
        return $this->parse_tickers($response, $symbols);
    }

    public function fetch_ticker(string $symbol, $params = array ()): array {
        /**
         * fetches a price ticker, a statistical calculation with the information calculated over the past 24 hours for a specific $market
         * @param {string} $symbol unified $symbol of the $market to fetch the ticker for
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @return {array} a ~@link https://docs.ccxt.com/#/?id=ticker-structure ticker structure~
         */
        $this->load_markets();
        $market = $this->market($symbol);
        $request = array(
            'symbol' => $market['id'],
        );
        $response = $this->v1PublicGetTicker ($this->extend($request, $params));
        //
        //        {
        //            "symbol" => "BTC_USDT_PERP",
        //            "baseSymbol" => "BTC.P",
        //            "quoteSymbol" => "USDT",
        //            "indexCurrency" => "USDT",
        //            "price" => "118806.89",
        //            "price24hAgo" => "118212.29",
        //            "high24h" => "119468.05",
        //            "low24h" => "117104.44",
        //            "volume24h" => "180.99438",
        //            "quoteVolume24h" => "21430157.5928827",
        //            "markPrice" => "118814.71",
        //            "indexPrice" => "118804.222610343",
        //            "fundingRate" => "0.000007",
        //            "nextFundingRate" => "0.000006",
        //            "nextFundingTime" => "1753390800000000",
        //            "productType" => "perpetual",
        //            "openInterest" => "2.55847",
        //            "usdVolume24h" => "21430157.5928827",
        //            "openInterestUSD" => "303963.8638583"
        //        }
        //
        return $this->parse_ticker($response, $market);
    }

    public function parse_ticker(array $ticker, ?array $market = null): array {
        $marketId = $this->safe_string($ticker, 'symbol');
        $market = $this->safe_market($marketId, $market);
        return $this->safe_ticker(array(
            'info' => $ticker,
            'symbol' => $this->safe_symbol($marketId, $market),
            'high' => $this->safe_number($ticker, 'high24h'),
            'low' => $this->safe_number($ticker, 'low24h'),
            'bid' => $this->safe_number($ticker, 'bid'),
            'last' => $this->safe_number($ticker, 'price'),
            'open' => $this->safe_number($ticker, 'price24hAgo'),
            'change' => $this->safe_number($ticker, 'priceChange'),
            'percentage' => $this->safe_number($ticker, 'priceChangePercent'),
            'baseVolume' => $this->safe_number($ticker, 'volume24h'),
            'quoteVolume' => $this->safe_number($ticker, 'usdVolume24h'),
            'markPrice' => $this->safe_number($ticker, 'markPrice'),
            'indexPrice' => $this->safe_number($ticker, 'indexPrice'),
            'vwap' => null,
            'average' => null,
            'previousClose' => null,
            'askVolume' => null,
            'bidVolume' => null,
        ));
    }

    public function fetch_trades(string $symbol, ?int $since = null, ?int $limit = null, $params = array ()): array {
        /**
         * get the list of most recent trades for a particular $symbol
         *
         * @see https://arkm.com/docs#get/public/trades
         *
         * @param {string} $symbol unified $symbol of the $market to fetch trades for
         * @param {int} [$since] timestamp in ms of the earliest trade to fetch
         * @param {int} [$limit] the maximum amount of trades to fetch
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @param {string} [$params->loc] crypto location, default => us
         * @param {string} [$params->method] method, default => marketPublicGetV1beta3CryptoLocTrades
         * @return {Trade[]} a list of ~@link https://docs.ccxt.com/#/?id=public-trades trade structures~
         */
        $this->load_markets();
        $market = $this->market($symbol);
        $marketId = $market['id'];
        $request = array(
            'symbol' => $marketId,
        );
        if ($limit !== null) {
            $request['limit'] = $limit;
        }
        $response = $this->v1PublicGetTrades ($this->extend($request, $params));
        //
        //    array(
        //        array(
        //            "symbol" => "BTC_USDT_PERP",
        //            "revisionId" => "1130514101",
        //            "size" => "0.01668",
        //            "price" => "116309.57",
        //            "takerSide" => "sell",
        //            "time" => "1753439710374047"
        //        ),
        //        ...
        //    )
        //
        return $this->parse_trades($response, $market, $since, $limit);
    }

    public function parse_trade(array $trade, ?array $market = null): array {
        //
        // fetchTrades
        //
        //        {
        //            "symbol" => "BTC_USDT_PERP",
        //            "revisionId" => "1130514101",
        //            "size" => "0.01668",
        //            "price" => "116309.57",
        //            "takerSide" => "sell",
        //            "time" => "1753439710374047"
        //        }
        //
        // fetchMyTrades
        //
        //        {
        //            "symbol" => "SOL_USDT",
        //            "revisionId" => "891839406",
        //            "size" => "0.042",
        //            "price" => "185.06",
        //            "takerSide" => "sell",
        //            "time" => "1753773952039342",
        //            "orderId" => "3717304929194",
        //            "userSide" => "sell",
        //            "quoteFee" => "0.00777252",
        //            "arkmFee" => "0",
        //            "clientOrderId" => ""
        //        }
        //
        $marketId = $this->safe_string($trade, 'symbol');
        $market = $this->safe_market($marketId, $market);
        $timestamp = $this->safe_integer_product($trade, 'time', 0.001);
        $quoteFee = $this->safe_number($trade, 'quoteFee');
        $arkmFee = $this->safe_number($trade, 'arkmFee');
        $fee = null;
        if ($quoteFee !== null) {
            $fee = array(
                'cost' => $quoteFee,
                'currency' => $market['quote'],
            );
        } elseif ($arkmFee !== null) {
            $fee = array(
                'cost' => $arkmFee,
                'currency' => 'ARKM',
            );
        }
        return $this->safe_trade(array(
            'info' => $trade,
            'id' => $this->safe_string($trade, 'revisionId'),
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601($timestamp),
            'symbol' => $market['symbol'],
            'type' => null,
            'side' => $this->safe_string_2($trade, 'userSide', 'takerSide'), // priority to userSide
            'takerOrMaker' => null,
            'price' => $this->safe_string($trade, 'price'),
            'amount' => $this->safe_string($trade, 'size'),
            'cost' => null,
            'fee' => $fee,
            'order' => $this->safe_string($trade, 'orderId'),
        ), $market);
    }

    public function fetch_order(string $id, ?string $symbol = null, $params = array ()) {
        /**
         * fetches information on an order made by the user
         *
         * @see https://arkm.com/docs#get/orders/by-client-order-$id
         *
         * @param {string} $id the order $id
         * @param {string} $symbol unified $symbol of the market the order was made in
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @param {string} [$params->clientOrderId] a unique $id for the order
         * @return {array} An ~@link https://docs.ccxt.com/#/?$id=order-structure order structure~
         */
        $request = array(
            'id' => intval($id),
        );
        $response = $this->v1PrivateGetOrdersId ($this->extend($request, $params));
        //
        //    {
        //        "orderId" => "3690478767430",
        //        "userId" => "2959123",
        //        "subaccountId" => "0",
        //        "symbol" => "SOL_USDT",
        //        "time" => "1753696843913970",
        //        "side" => "sell",
        //        "type" => "limitGtc",
        //        "size" => "0.066",
        //        "price" => "293.2",
        //        "postOnly" => false,
        //        "reduceOnly" => false,
        //        "executedSize" => "0",
        //        "status" => "booked",
        //        "avgPrice" => "0",
        //        "executedNotional" => "0",
        //        "creditFeePaid" => "0",
        //        "marginBonusFeePaid" => "0",
        //        "quoteFeePaid" => "0",
        //        "arkmFeePaid" => "0",
        //        "revisionId" => "887956326",
        //        "lastTime" => "1753696843914830",
        //        "clientOrderId" => "",
        //        "lastSize" => "0",
        //        "lastPrice" => "0",
        //        "lastCreditFee" => "0",
        //        "lastMarginBonusFee" => "0",
        //        "lastQuoteFee" => "0",
        //        "lastArkmFee" => "0"
        //    }
        //
        return $this->parse_order($response);
    }

    public function fetch_closed_orders(?string $symbol = null, ?int $since = null, ?int $limit = null, $params = array ()): array {
        /**
         * fetches information on multiple closed orders made by the user
         *
         * @see https://arkm.com/docs#get/orders/history
         *
         * @param {string} $symbol unified $market $symbol of the $market orders were made in
         * @param {int} [$since] the earliest time in ms to fetch orders for
         * @param {int} [$limit] the maximum number of order structures to retrieve
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @param {int} [$params->until] the latest time in ms to fetch orders for
         * @return {Order[]} a list of ~@link https://docs.ccxt.com/#/?id=order-structure order structures~
         */
        $this->load_markets();
        $request = array();
        $market = null;
        if ($symbol !== null) {
            $market = $this->market($symbol);
            $request['symbol'] = $market['id'];
        }
        if ($limit !== null) {
            $request['limit'] = $limit; // note, API does not work for this param
        }
        $response = $this->v1PrivateGetOrdersHistory ($this->extend($request, $params));
        //
        //     array(
        //        {
        //            "orderId" => "3690478767430",
        //            "userId" => "2959123",
        //            "subaccountId" => "0",
        //            "symbol" => "SOL_USDT",
        //            "time" => "1753696843913970",
        //            "side" => "sell",
        //            "type" => "limitGtc",
        //            "size" => "0.066",
        //            "price" => "293.2",
        //            "postOnly" => false,
        //            "reduceOnly" => false,
        //            "executedSize" => "0",
        //            "status" => "closed",
        //            "avgPrice" => "0",
        //            "executedNotional" => "0",
        //            "creditFeePaid" => "0",
        //            "marginBonusFeePaid" => "0",
        //            "quoteFeePaid" => "0",
        //            "arkmFeePaid" => "0",
        //            "revisionId" => "888084076",
        //            "lastTime" => "1753701350088305",
        //            "clientOrderId" => "",
        //            "lastSize" => "0",
        //            "lastPrice" => "0",
        //            "lastCreditFee" => "0",
        //            "lastMarginBonusFee" => "0",
        //            "lastQuoteFee" => "0",
        //            "lastArkmFee" => "0"
        //        }
        //    )
        //
        return $this->parse_orders($response, $market, $since, $limit);
    }

    public function fetch_open_orders(?string $symbol = null, ?int $since = null, ?int $limit = null, $params = array ()): array {
        /**
         * fetch all unfilled currently open orders
         *
         * @see https://arkm.com/docs#get/orders
         *
         * @param {string} $symbol unified $market $symbol of the $market orders were made in
         * @param {int} [$since] the earliest time in ms to fetch orders for
         * @param {int} [$limit] the maximum number of order structures to retrieve
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @param {int} [$params->until] the latest time in ms to fetch orders for
         * @return {Order[]} a list of ~@link https://docs.ccxt.com/#/?id=order-structure order structures~
         */
        $this->load_markets();
        $market = null;
        if ($symbol !== null) {
            $market = $this->market($symbol);
        }
        $isTriggerOrder = $this->safe_bool($params, 'trigger');
        $params = $this->omit($params, 'trigger');
        $response = null;
        if ($isTriggerOrder) {
            $response = $this->v1PrivateGetTriggerOrders ($this->extend(array(), $params));
            //
            //    array(
            //        array(
            //            "subaccountId" => "0",
            //            "symbol" => "SOL_USDT",
            //            "side" => "sell",
            //            "type" => "market",
            //            "size" => "0.045",
            //            "price" => "99.9",
            //            "postOnly" => false,
            //            "reduceOnly" => false,
            //            "time" => "1753768103780063",
            //            "triggerOrderId" => "3715847222127",
            //            "triggerType" => "stopLoss",
            //            "triggerPriceType" => "last",
            //            "triggerPrice" => "111",
            //            "clientOrderId" => "",
            //            "status" => "staged"
            //        ),
            //    )
            //
        } else {
            $response = $this->v1PrivateGetOrders ($this->extend(array(), $params));
            //
            // array(
            //    {
            //        "orderId" => "3690478767430",
            //        "userId" => "2959123",
            //        "subaccountId" => "0",
            //        "symbol" => "SOL_USDT",
            //        "time" => "1753696843913970",
            //        "side" => "sell",
            //        "type" => "limitGtc",
            //        "size" => "0.066",
            //        "price" => "293.2",
            //        "postOnly" => false,
            //        "reduceOnly" => false,
            //        "executedSize" => "0",
            //        "status" => "booked",
            //        "avgPrice" => "0",
            //        "executedNotional" => "0",
            //        "creditFeePaid" => "0",
            //        "marginBonusFeePaid" => "0",
            //        "quoteFeePaid" => "0",
            //        "arkmFeePaid" => "0",
            //        "revisionId" => "887956326",
            //        "lastTime" => "1753696843914830",
            //        "clientOrderId" => "",
            //        "lastSize" => "0",
            //        "lastPrice" => "0",
            //        "lastCreditFee" => "0",
            //        "lastMarginBonusFee" => "0",
            //        "lastQuoteFee" => "0",
            //        "lastArkmFee" => "0"
            //    }
            // )
            //
        }
        return $this->parse_orders($response, $market, $since, $limit);
    }

    public function cancel_order(string $id, ?string $symbol = null, $params = array ()) {
        /**
         * cancels an open order
         *
         * @see https://arkm.com/docs#post/orders/cancel
         *
         * @param {string} $id order $id
         * @param {string} $symbol unified $symbol of the $market the order was made in
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @return {array} An ~@link https://docs.ccxt.com/#/?$id=order-structure order structure~
         */
        $isTriggerOrder = $this->safe_bool($params, 'trigger');
        $params = $this->omit($params, 'trigger');
        $response = null;
        $request = array();
        $clientOrderId = $this->safe_integer($params, 'clientOrderId');
        if ($clientOrderId !== null) {
            $params = $this->omit($params, 'clientOrderId');
            $request['clientOrderId'] = $clientOrderId;
        } else {
            if ($isTriggerOrder) {
                $request['triggerOrderId'] = intval($id);
            } else {
                $request['orderId'] = intval($id);
            }
        }
        if ($isTriggerOrder) {
            if ($symbol === null) {
                throw new ArgumentsRequired($this->id . ' cancelOrder() requires a $symbol argument for trigger orders');
            }
            $market = $this->market($symbol);
            $request['symbol'] = $market['id'];
            $response = $this->v1PrivatePostTriggerOrdersCancel ($this->extend($request, $params));
        } else {
            $response = $this->v1PrivatePostOrdersCancel ($this->extend($request, $params));
        }
        //
        // array("orderId":3691703758327)
        //
        return $this->parse_order($response);
    }

    public function cancel_all_orders(?string $symbol = null, $params = array ()) {
        /**
         * cancel all open orders in a market
         *
         * @see https://arkm.com/docs#post/orders/cancel/all
         *
         * @param {string} $symbol cancel alls open orders
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @return {array[]} a list of ~@link https://docs.ccxt.com/#/?id=order-structure order structures~
         */
        if ($symbol !== null) {
            throw new BadRequest($this->id . ' cancelAllOrders() does not support a $symbol argument, use cancelOrder() or fetchOpenOrders() instead');
        }
        $isTriggerOrder = $this->safe_bool($params, 'trigger');
        $params = $this->omit($params, 'trigger');
        $response = null;
        if ($isTriggerOrder) {
            $response = $this->v1PrivatePostTriggerOrdersCancelAll ($params);
        } else {
            $response = $this->v1PrivatePostOrdersCancelAll ($params);
        }
        //
        // array()  returns an empty array, even when successfully cancels orders
        //
        return $this->parse_orders($response, null);
    }

    public function create_order(string $symbol, string $type, string $side, float $amount, ?float $price = null, $params = array ()) {
        /**
         * create a trade order on the exchange
         *
         * @see https://arkm.com/docs#post/orders/new
         *
         * @param {string} $symbol unified CCXT $market $symbol
         * @param {string} $type "limit" or "market"
         * @param {string} $side "buy" or "sell"
         * @param {float} $amount the $amount of currency to trade
         * @param {float} [$price] the $price at which the order is to be fulfilled, in units of the quote currency, ignored in $market orders
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @param {string} [$params->timeInForce] "GTC", "IOC", "FOK", or "PO"
         * @param {float} [$params->triggerPrice] $price for a trigger (conditional) order
         * @param {float} [$params->stopLossPrice] $price for a stoploss order
         * @param {float} [$params->takeProfitPrice] $price for a takeprofit order
         * @param {string} [$params->triggerDirection] the direction for trigger orders, 'ascending' or 'descending'
         * @param {string} [$params->triggerPriceType] mark, index or last
         * @param {bool} [$params->postOnly] true or false whether the order is post-only
         * @param {bool} [$params->reduceOnly] true or false whether the order is reduce-only
         * @return ~@link https://docs.ccxt.com/#/?id=order-structure An order structure~
         */
        $this->load_markets();
        $market = $this->market($symbol);
        $isTriggerOrder = $this->safe_number_n($params, array( 'triggerPrice', 'stopLossPrice', 'takeProfitPrice' )) !== null;
        $request = $this->create_order_request($symbol, $type, $side, $amount, $price, $params);
        $response = null;
        if ($isTriggerOrder) {
            $response = $this->v1PrivatePostTriggerOrdersNew ($request);
            //
            //    {
            //        "triggerOrderId" => "3716436645573",
            //        "symbol" => "SOL_USDT_PERP",
            //        "side" => "buy",
            //        "type" => "limitGtc",
            //        "size" => "0.05",
            //        "price" => "150"
            //    }
            //
        } else {
            $response = $this->v1PrivatePostOrdersNew ($request);
            //
            //    {
            //        "orderId" => "3694872060678",
            //        "clientOrderId" => "test123",
            //        "symbol" => "SOL_USDT",
            //        "subaccountId" => "0",
            //        "side" => "buy",
            //        "type" => "limitGtc",
            //        "size" => "0.05",
            //        "price" => "170",
            //        "time" => "1753710501474043"
            //    }
            //
        }
        return $this->parse_order($response, $market);
    }

    public function create_order_request(string $symbol, string $type, string $side, float $amount, ?float $price = null, $params = array ()) {
        $market = $this->market($symbol);
        $symbol = $market['symbol'];
        $request = array(
            'symbol' => $market['id'],
            'side' => $side,
            'size' => $this->amount_to_precision($symbol, $amount),
        );
        $isBuy = ($side === 'buy');
        $stopLossPrice = $this->safe_number($params, 'stopLossPrice');
        $takeProfitPrice = $this->safe_number($params, 'takeProfitPrice');
        $triggerPriceAny = $this->safe_string_n($params, array( 'triggerPrice', 'stopLossPrice', 'takeProfitPrice' ));
        if ($triggerPriceAny !== null) {
            $request['triggerPrice'] = $this->price_to_precision($symbol, $triggerPriceAny);
            if ($stopLossPrice !== null) {
                $request['triggerType'] = $isBuy ? 'stopLoss' : 'takeProfit';
            } elseif ($takeProfitPrice !== null) {
                $request['triggerType'] = $isBuy ? 'takeProfit' : 'stopLoss';
            } else {
                $triggerDirection = $this->safe_string($params, 'triggerDirection');
                if ($triggerDirection === null) {
                    throw new ArgumentsRequired($this->id . ' createOrder() requires a $triggerDirection parameter when triggerPrice is specified, must be "ascending" or "descending"');
                }
                if ($triggerDirection !== null) {
                    if ($triggerDirection === 'ascending') {
                        $request['triggerType'] = $isBuy ? 'stopLoss' : 'takeProfit';
                    } elseif ($triggerDirection === 'descending') {
                        $request['triggerType'] = $isBuy ? 'takeProfit' : 'stopLoss';
                    }
                }
            }
            // mandatory triggerPriceType
            if ($this->safe_string($params, 'triggerPriceType') === null) {
                $request['triggerPriceType'] = 'last'; // default
            }
        }
        $isMarketOrder = ($type === 'market');
        $isLimitOrder = ($type === 'limit');
        $isLimitExchangeSpecific = $this->in_array($type, array( 'limitGtc', 'limitIoc', 'limitFok' ));
        $postOnly = $this->is_post_only($isMarketOrder, false, $params);
        $timeInForce = $this->safe_string($params, 'timeInForce');
        $params = $this->omit($params, array( 'postOnly', 'timeInForce', 'triggerPrice', 'stopLossPrice', 'takeProfitPrice', 'triggerDirection' ));
        if ($postOnly) {
            $request['postOnly'] = true;
        }
        if ($isLimitOrder || $isLimitExchangeSpecific) {
            $request['price'] = $this->price_to_precision($symbol, $price);
            //
            if ($timeInForce === 'IOC') {
                $request['type'] = 'limitIoc';
            } elseif ($timeInForce === 'FOK') {
                $request['type'] = 'limitFok';
            } else {
                $request['type'] = 'limitGtc';
            }
        } elseif ($isMarketOrder) {
            $request['type'] = 'market';
        }
        // we don't need to manually handle `reduceOnly`, `clientOrderId`, `triggerPriceType` here-specific keyname & values matches
        return $this->extend($request, $params);
    }

    public function parse_order(array $order, ?array $market = null): array {
        //
        // createOrder
        //
        //    {
        //        "orderId" => "3694872060678",
        //        "clientOrderId" => "test123",
        //        "symbol" => "SOL_USDT",
        //        "subaccountId" => "0",
        //        "side" => "buy",
        //        "type" => "limitGtc",
        //        "size" => "0.05",
        //        "price" => "170",
        //        "time" => "1753710501474043"
        //    }
        //
        // fetchOrder, fetchOpenOrders, fetchClosedOrders
        //
        //    {
        //        "orderId" => "3690478767430",
        //        "userId" => "2959123",
        //        "subaccountId" => "0",
        //        "symbol" => "SOL_USDT",
        //        "time" => "1753696843913970",
        //        "side" => "sell",
        //        "type" => "limitGtc",
        //        "size" => "0.066",
        //        "price" => "293.2",
        //        "postOnly" => false,
        //        "reduceOnly" => false,
        //        "executedSize" => "0",
        //        "status" => "booked",
        //        "avgPrice" => "0",
        //        "executedNotional" => "0",
        //        "creditFeePaid" => "0",
        //        "marginBonusFeePaid" => "0",
        //        "quoteFeePaid" => "0",
        //        "arkmFeePaid" => "0",
        //        "revisionId" => "887956326",
        //        "lastTime" => "1753696843914830",
        //        "clientOrderId" => "",
        //        "lastSize" => "0",
        //        "lastPrice" => "0",
        //        "lastCreditFee" => "0",
        //        "lastMarginBonusFee" => "0",
        //        "lastQuoteFee" => "0",
        //        "lastArkmFee" => "0"
        //    }
        //
        // trigger-orders => createOrder
        //
        //    {
        //        "triggerOrderId" => "3716436645573",
        //        "symbol" => "SOL_USDT_PERP",
        //        "side" => "buy",
        //        "type" => "limitGtc",
        //        "size" => "0.05",
        //        "price" => "150"
        //    }
        //
        // trigger-orders => fetchOpenOrders
        //
        //    {
        //            "subaccountId" => "0",
        //            "symbol" => "SOL_USDT",
        //            "side" => "sell",
        //            "type" => "market",
        //            "size" => "0.045",
        //            "price" => "99.9",
        //            "postOnly" => false,
        //            "reduceOnly" => false,
        //            "time" => "1753768103780063",
        //            "triggerOrderId" => "3715847222127",
        //            "triggerType" => "stopLoss",
        //            "triggerPriceType" => "last",
        //            "triggerPrice" => "111",
        //            "clientOrderId" => "",
        //            "status" => "staged"
        //    }
        //
        $marketId = $this->safe_string($order, 'symbol');
        $market = $this->safe_market($marketId, $market);
        $isPostOnly = $this->safe_bool($order, 'postOnly');
        $typeRaw = $this->safe_string($order, 'type');
        $orderType = $isPostOnly ? 'limit' : $this->parse_order_type($typeRaw);
        $timeInForce = $isPostOnly ? 'PO' : $this->parse_time_in_force($typeRaw);
        $quoteFeePaid = $this->safe_string($order, 'quoteFeePaid');
        $arkmFeePaid = $this->safe_string($order, 'arkmFeePaid');
        $fees = array();
        if ($quoteFeePaid !== null) {
            $fees[] = array(
                'cost' => $quoteFeePaid,
                'currency' => $this->safe_string($market, 'quote'),
            );
        }
        if ($arkmFeePaid !== null) {
            $fees[] = array(
                'cost' => $arkmFeePaid,
                'currency' => 'ARKM',
            );
        }
        $timestamp = $this->safe_integer_product($order, 'time', 0.001);
        return $this->safe_order(array(
            'id' => $this->safe_string_2($order, 'orderId', 'triggerOrderId'),
            'clientOrderId' => $this->safe_string($order, 'clientOrderId'),
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601($timestamp),
            'lastTradeTimeStamp' => null,
            'lastUpdateTimestamp' => $this->safe_integer_product($order, 'lastTime', 0.001),
            'status' => $this->parse_order_status($this->safe_string($order, 'status')),
            'symbol' => $market['symbol'],
            'type' => $orderType,
            'timeInForce' => $timeInForce,
            'postOnly' => null,
            'side' => $this->safe_string($order, 'side'),
            'price' => $this->safe_number($order, 'price'),
            'triggerPrice' => null,
            'cost' => $this->safe_number($order, 'executedNotional'),
            'average' => $this->safe_number_omit_zero($order, 'avgPrice'),
            'amount' => $this->safe_number($order, 'size'),
            'filled' => $this->safe_number($order, ''),
            'remaining' => null,
            'trades' => null,
            'fees' => $fees,
            'reduceOnly' => $this->safe_bool($order, 'reduceOnly'),
            'info' => $order,
        ), $market);
    }

    public function parse_order_type(?string $type): ?string {
        $types = array(
            'limitGtc' => 'limit',
            'limitIoc' => 'limit',
            'limitFok' => 'limit',
            'market' => 'market',
        );
        return $this->safe_string_upper($types, $type, $type);
    }

    public function parse_time_in_force(?string $type): ?string {
        $types = array(
            'limitGtc' => 'GTC',
            'limitIoc' => 'IOC',
            'limitFok' => 'FOK',
            'market' => 'IOC',
        );
        return $this->safe_string_upper($types, $type, $type);
    }

    public function parse_order_status(?string $status) {
        $statuses = array(
            'new' => 'pending',
            'staged' => 'open',
            'booked' => 'open',
            'taker' => 'closed',
            'maker' => 'closed',
            'cancelled' => 'canceled',
            'closed' => 'closed',
        );
        return $this->safe_string($statuses, $status, $status);
    }

    public function fetch_my_trades(?string $symbol = null, ?int $since = null, ?int $limit = null, $params = array ()) {
        /**
         * fetch all trades made by the user
         *
         * @see https://arkm.com/docs#get/trades/time
         *
         * @param {string} [$symbol] unified market $symbol
         * @param {int} [$since] the earliest time in ms to fetch trades for
         * @param {int} [$limit] the maximum number of trade structures to retrieve
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @param {int} [$params->until] the latest time in ms to fetch trades for
         * @param {string} [$params->page_token] page_token - used for paging
         * @return {Trade[]} a list of ~@link https://docs.ccxt.com/#/?id=trade-structure trade structures~
         */
        $this->load_markets();
        $request = array();
        if ($limit !== null) {
            $request['limit'] = $limit;
        }
        // exchange needs to obtain some `from & to` values, otherwise it does not return any result
        $defaultRange = 24 * 60 * 60 * 1000; // default to last 24 hours
        if ($since !== null) {
            $request['from'] = $since * 1000; // convert ms to microseconds
        } else {
            $request['from'] = ($this->milliseconds() - $defaultRange) * 1000; // default to last 24 hours
        }
        $until = $this->safe_integer($params, 'until');
        if ($until !== null) {
            $params = $this->omit($params, 'until');
            $request['to'] = $until * 1000; // convert ms to microseconds
        } else {
            $request['to'] = $this->sum($request['from'], $defaultRange * 1000);
        }
        list($request, $params) = $this->handle_until_option('until', $request, $params);
        $response = $this->v1PrivateGetTradesTime ($this->extend($request, $params));
        //
        //    [
        //        array(
        //            "symbol" => "SOL_USDT",
        //            "revisionId" => "891839406",
        //            "size" => "0.042",
        //            "price" => "185.06",
        //            "takerSide" => "sell",
        //            "time" => "1753773952039342",
        //            "orderId" => "3717304929194",
        //            "userSide" => "sell",
        //            "quoteFee" => "0.00777252",
        //            "arkmFee" => "0",
        //            "clientOrderId" => ""
        //        ),
        //        ...
        //
        return $this->parse_trades($response, null, $since, $limit);
    }

    public function fetch_accounts($params = array ()): array {
        /**
         * fetch all the accounts associated with a profile
         *
         * @see https://arkm.com/docs#get/user
         *
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @return {array} a dictionary of ~@link https://docs.ccxt.com/#/?id=account-structure account structures~ indexed by the account type
         */
        $this->load_markets();
        $request = array();
        $accountId = null;
        list($accountId, $params) = $this->handle_option_and_params($params, 'fetchAccounts', 'accountId');
        if ($accountId !== null) {
            $request['subAccountId'] = $accountId;
        }
        $response = $this->v1PrivateGetUser ($this->extend($request, $params));
        //
        //    {
        //        "id" => "2959123",
        //        "email" => "xyz@gmail.com",
        //        "username" => "t.123",
        //        "requireMFA" => true,
        //        "kycVerifiedAt" => "1753434515850673",
        //        "pmm" => false,
        //        "dmm" => false,
        //        "becameVipAt" => "0",
        //        "subaccounts" => array(
        //            {
        //                "id" => "0",
        //                "name" => "Primary",
        //                "pinned" => true,
        //                "isLsp" => false,
        //                "futuresEnabled" => true,
        //                "payFeesInArkm" => false,
        //                "lspSettings" => array()
        //            }
        //        ),
        //        "settings" => array(
        //            "autogenDepositAddresses" => false,
        //            "hideBalances" => false,
        //            "confirmBeforePlaceOrder" => false,
        //            "tickerTapeScroll" => true,
        //            "updatesFlash" => true,
        //            "notifyOrderFills" => false,
        //            "notifyAnnouncements" => false,
        //            "notifyMarginUsage" => false,
        //            "marginUsageThreshold" => "0.5",
        //            "notifyWithdrawals" => true,
        //            "notifyDeposits" => true,
        //            "notifySendEmail" => true,
        //            "notifyRebates" => true,
        //            "notifyCommissions" => true,
        //            "allowSequenceEmails" => true,
        //            "language" => "en"
        //        ),
        //        "airdropKycAt" => null
        //    }
        //
        $subAccounts = $this->safe_list($response, 'subaccounts', array());
        return $this->parse_accounts($subAccounts, $params);
    }

    public function parse_account($account) {
        //
        //            {
        //                "id" => "0",
        //                "name" => "Primary",
        //                "pinned" => true,
        //                "isLsp" => false,
        //                "futuresEnabled" => true,
        //                "payFeesInArkm" => false,
        //                "lspSettings" => array()
        //            }
        //
        return array(
            'id' => $this->safe_string($account, 'id'),
            'type' => null,
            'code' => null,
            'info' => $account,
        );
    }

    public function fetch_balance($params = array ()): array {
        /**
         * query for account info
         *
         * @see https://arkm.com/docs#get/account/balances
         *
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @return {array} a ~@link https://docs.ccxt.com/#/?id=balance-structure balance structure~
         */
        $this->load_markets();
        $response = $this->v1PrivateGetAccountBalances ($params);
        //
        //    array(
        //        array(
        //            "subaccountId" => "0",
        //            "symbol" => "USDT",
        //            "balance" => "19.66494694",
        //            "free" => "19.66494694",
        //            "priceUSDT" => "1",
        //            "balanceUSDT" => "19.66494694",
        //            "freeUSDT" => "19.66494694",
        //            "lastUpdateReason" => "orderFill",
        //            "lastUpdateTime" => "1753773952039342",
        //            "lastUpdateId" => "248507437",
        //            "lastUpdateAmount" => "7.77252"
        //        ),
        //        {
        //            "subaccountId" => "0",
        //            "symbol" => "SOL",
        //            "balance" => "0",
        //            "free" => "0",
        //            "priceUSDT" => "186.025584673",
        //            "balanceUSDT" => "0",
        //            "freeUSDT" => "0",
        //            "lastUpdateReason" => "orderFill",
        //            "lastUpdateTime" => "1753773952039342",
        //            "lastUpdateId" => "248507435",
        //            "lastUpdateAmount" => "-0.042"
        //        }
        //    )
        //
        return $this->parse_balance($response);
    }

    public function parse_balance($response): array {
        $timestamp = $this->safe_integer_product($response, 'lastUpdateTime', 0.001);
        $result = array(
            'info' => $response,
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601($timestamp),
        );
        for ($i = 0; $i < count($response); $i++) {
            $balance = $response[$i];
            $symbol = $this->safe_string($balance, 'symbol');
            $code = $this->safe_currency_code($symbol);
            $account = $this->account();
            $account['total'] = $this->safe_string($balance, 'balance');
            $account['free'] = $this->safe_string($balance, 'free');
            $result[$code] = $account;
        }
        return $this->safe_balance($result);
    }

    public function create_deposit_address(string $code, $params = array ()): array {
        /**
         * create a currency deposit $address
         *
         * @see https://arkm.com/docs#post/account/deposit/addresses/new
         *
         * @param {string} $code unified currency $code of the currency for the deposit $address
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @return {array} an ~@link https://docs.ccxt.com/#/?id=$address-structure $address structure~
         */
        $this->load_markets();
        $networkCode = null;
        list($networkCode, $params) = $this->handle_network_code_and_params($params);
        if ($networkCode === null) {
            throw new ArgumentsRequired($this->id . ' createDepositAddress() requires a "network" param');
        }
        $request = array(
            'chain' => $networkCode,
        );
        $response = $this->v1PrivatePostAccountDepositAddressesNew ($this->extend($request, $params));
        //
        //    {
        //        "addresses" => "12NauJ26TUT9aYkpId7YdePJJDRMGbAsEMVoTVUvBErV"
        //    }
        //
        $address = $this->safe_string($response, 'addresses');
        return $this->parse_deposit_address($address, $this->currency($code));
    }

    public function fetch_deposit_addresses_by_network(string $code, $params = array ()): array {
        /**
         * fetch the deposit addresses for a currency associated with this account
         *
         * @see https://arkm.com/docs#get/account/deposit/addresses
         *
         * @param {string} $code unified currency $code
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @return {array} a dictionary ~@link https://docs.ccxt.com/#/?id=address-structure address structures~, indexed by the network
         */
        $this->load_markets();
        $networkCode = null;
        list($networkCode, $params) = $this->handle_network_code_and_params($params);
        if ($networkCode === null) {
            throw new ArgumentsRequired($this->id . ' fetchDepositAddressesByNetwork() requires a "network" param');
        }
        $request = array(
            'chain' => $this->network_code_to_id($networkCode),
        );
        $response = $this->v1PrivateGetAccountDepositAddresses ($this->extend($request, $params));
        //
        //    {
        //        "addresses" => array(
        //            "12NauJ26TUT9aYkpId7YdePJJDRMGbAsEMVoTVUvBErV"
        //        )
        //    }
        //
        $data = $this->safe_list($response, 'addresses');
        $parsed = $this->parse_deposit_addresses($data, null, false, array( 'network' => $networkCode ));
        return $this->index_by($parsed, 'network');
    }

    public function parse_deposit_address($entry, ?array $currency = null): array {
        //
        //     "12NauJ26TUT9aYkpId7YdePJJDRMGbAsEMVoTVUvBErV"
        //
        return array(
            'info' => $entry,
            'currency' => $this->safe_string($currency, 'code'),
            'network' => null,
            'address' => $entry,
            'tag' => null,
        );
    }

    public function fetch_deposit_address(string $code, $params = array ()): array {
        /**
         * fetch the deposit $address for a $currency associated with this account
         *
         * @see https://arkm.com/docs#get/account/deposit/addresses
         *
         * @param {string} $code unified $currency $code
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @return {array} an ~@link https://docs.ccxt.com/#/?id=$address-structure $address structure~
         */
        $this->load_markets();
        $currency = $this->currency($code);
        $networkCodeAndParams = $this->handle_network_code_and_params($params);
        $networkCode = $networkCodeAndParams[0];
        $indexedAddresses = $this->fetch_deposit_addresses_by_network($code, $params);
        $selectedNetworkCode = $this->select_network_code_from_unified_networks($currency['code'], $networkCode, $indexedAddresses);
        $address = $this->safe_dict($indexedAddresses, $selectedNetworkCode);
        if ($address === null) {
            throw new InvalidAddress($this->id . ' fetchDepositAddress() could not find a deposit $address for ' . $code);
        }
        return $address;
    }

    public function fetch_deposits(?string $code = null, ?int $since = null, ?int $limit = null, $params = array ()): array {
        /**
         * fetch all deposits made to an account
         *
         * @see https://arkm.com/docs#get/account/deposits
         *
         * @param {string} $code unified $currency $code
         * @param {int} [$since] the earliest time in ms to fetch deposits for
         * @param {int} [$limit] the maximum number of deposits structures to retrieve
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @return {array[]} a list of ~@link https://docs.ccxt.com/#/?id=transaction-structure transaction structures~
         */
        $this->load_markets();
        $request = array();
        if ($limit !== null) {
            $request['limit'] = $limit;
        }
        $response = $this->v1PrivateGetAccountDeposits ($this->extend($request, $params));
        //
        //    array(
        //        {
        //            "id" => "238644",
        //            "symbol" => "SOL",
        //            "amount" => "0.104",
        //            "time" => "1753436404000000",
        //            "confirmed" => true,
        //            "transactionHash" => "1DRxbbyePTsMuB82SDf2fG5gLXH5iYnY8TQDstDPLULpLtjMJtF1ug1T4Mf8B6DSb8fp2sb5YtdbyqieZ2tkE1Ve",
        //            "chain" => "Solana",
        //            "depositAddress" => "12NauJ26TUT9aYkpId7YdePJJDRMGbAsEMVoTVUvBErV",
        //            "price" => "180.322010164"
        //        }
        //    )
        //
        $currency = null;
        if ($code !== null) {
            $currency = $this->currency($code);
        }
        return $this->parse_transactions($response, $currency, $since, $limit);
    }

    public function parse_transaction(array $transaction, ?array $currency = null): array {
        //
        //        {
        //            "id" => "238644",
        //            "symbol" => "SOL",
        //            "amount" => "0.104",
        //            "time" => "1753436404000000",
        //            "confirmed" => true,
        //            "transactionHash" => "1DRxbbyePTsMuB82SDf2fG5gLXH5iYnY8TQDstDPLULpLtjMJtF1ug1T4Mf8B6DSb8fp2sb5YtdbyqieZ2tkE1Ve",
        //            "chain" => "Solana",
        //            "depositAddress" => "12NauJ26TUT9aYkpId7YdePJJDRMGbAsEMVoTVUvBErV",
        //            "price" => "180.322010164"
        //        }
        //
        $address = $this->safe_string($transaction, 'depositAddress');
        $timestamp = $this->safe_integer_product($transaction, 'time', 0.001);
        $confirmd = $this->safe_bool($transaction, 'confirmed');
        $status = null;
        if ($confirmd) {
            $status = 'ok';
        }
        $currencyId = $this->safe_string($transaction, 'symbol');
        $code = $this->safe_currency_code($currencyId, $currency);
        return array(
            'info' => $transaction,
            'id' => $this->safe_string($transaction, 'id'),
            'txid' => $this->safe_string($transaction, 'transactionHash'),
            'type' => null,
            'currency' => $code,
            'network' => $this->network_id_to_code($this->safe_string($transaction, 'chain')),
            'amount' => $this->safe_number($transaction, 'amount'),
            'status' => $status,
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601($timestamp),
            'address' => $address,
            'addressFrom' => null,
            'addressTo' => $address,
            'tag' => null,
            'tagFrom' => null,
            'tagTo' => null,
            'updated' => null,
            'comment' => null,
            'fee' => null,
            'internal' => false,
        );
    }

    public function fetch_trading_fees($params = array ()): array {
        /**
         * fetch the trading fees for multiple markets
         *
         * @see https://arkm.com/docs#get/account/fees
         *
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @param {string} [$params->subType] "linear" or "inverse"
         * @return {array} a dictionary of ~@link https://docs.ccxt.com/#/?id=fee-structure fee structures~ indexed by $market $symbols
         */
        $this->load_markets();
        $response = $this->v1PrivateGetAccountFees ($params);
        //
        // {
        //   "perpMakerFee" => "1.23",
        //   "perpTakerFee" => "1.23",
        //   "spotMakerFee" => "1.23",
        //   "spotTakerFee" => "1.23"
        // }
        //
        $symbols = is_array($this->markets) ? array_keys($this->markets) : array();
        $result = array();
        $spotMaker = $this->safe_number($response, 'spotMakerFee');
        $spotTaker = $this->safe_number($response, 'spotTakerFee');
        $perpMaker = $this->safe_number($response, 'perpMakerFee');
        $perpTaker = $this->safe_number($response, 'perpTakerFee');
        for ($i = 0; $i < count($symbols); $i++) {
            $symbol = $symbols[$i];
            $market = $this->markets[$symbol];
            $result[$symbol] = array(
                'info' => $response,
                'symbol' => $symbol,
            );
            if ($market['spot']) {
                $result[$symbol]['maker'] = $spotMaker;
                $result[$symbol]['taker'] = $spotTaker;
            } elseif ($market['swap'] || $market['future']) {
                $result[$symbol]['maker'] = $perpMaker;
                $result[$symbol]['taker'] = $perpTaker;
            }
        }
        return $result;
    }

    public function fetch_funding_history(?string $symbol = null, ?int $since = null, ?int $limit = null, $params = array ()) {
        /**
         * fetch the history of funding payments paid and received on this account
         *
         * @see https://arkm.com/docs#get/account/funding-rate-payments
         *
         * @param {string} [$symbol] unified $market $symbol
         * @param {int} [$since] the earliest time in ms to fetch funding history for
         * @param {int} [$limit] the maximum number of funding history structures to retrieve
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @param {boolean} [$params->paginate] default false, when true will automatically paginate by calling this endpoint multiple times. See in the docs all the [available parameters](https://github.com/ccxt/ccxt/wiki/Manual#pagination-$params)
         * @return {array} a ~@link https://docs.ccxt.com/#/?id=funding-history-structure funding history structure~
         */
        $this->load_markets();
        $market = null;
        if ($symbol !== null) {
            $market = $this->market($symbol);
        }
        $request = array();
        if ($limit !== null) {
            $request['limit'] = $limit;
        }
        $response = $this->v1PrivateGetAccountFundingRatePayments ($this->extend($request, $params));
        //
        //     array(
        //         array(
        //             "amount" => "20.1",
        //             "assetSymbol" => "BTC",
        //             "indexPrice" => "1.23",
        //             "pairSymbol" => "BTC_USDT",
        //             "time" => 1704067200000000,
        //             "id" => 1,
        //             "subaccountId" => 1,
        //             "userId" => 1
        //         ),
        //         ...
        //     )
        //
        return $this->parse_incomes($response, $market, $since, $limit);
    }

    public function parse_income($income, ?array $market = null) {
        //
        //         {
        //             "amount" => "20.1",
        //             "assetSymbol" => "BTC",
        //             "indexPrice" => "1.23",
        //             "pairSymbol" => "BTC_USDT",
        //             "time" => 1704067200000000,
        //             "id" => 1,
        //             "subaccountId" => 1,
        //             "userId" => 1
        //         }
        //
        $marketId = $this->safe_string($income, 'pairSymbol');
        $currencyId = $this->safe_string($income, 'assetSymbol');
        $timestamp = $this->safe_integer_product($income, 'time', 0.001);
        return array(
            'info' => $income,
            'symbol' => $this->safe_symbol($marketId, $market),
            'code' => $this->safe_currency_code($currencyId),
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601($timestamp),
            'id' => $this->safe_string($income, 'id'),
            'amount' => $this->safe_number($income, 'amount'),
        );
    }

    public function fetch_leverage(string $symbol, $params = array ()): array {
        /**
         * fetch the set leverage for a $market
         *
         * @see https://arkm.com/docs#get/account/leverage
         *
         * @param {string} $symbol unified $market $symbol
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @return {array} a ~@link https://docs.ccxt.com/#/?id=leverage-structure leverage structure~
         */
        $this->load_markets();
        $market = $this->market($symbol);
        $marketId = $this->safe_string($market, 'id');
        $request = array(
            'symbol' => $marketId,
        );
        $response = $this->v1PrivateGetAccountLeverage ($this->extend($request, $params));
        //
        // might be empty if not changed from default value (which is 1x)
        //
        //    array(
        //        array(
        //            "symbol" => "BTC_USDT_PERP",
        //            "leverage" => "7"
        //        ),
        //        {
        //            "symbol" => "ETH_USDT_PERP",
        //            "leverage" => "5"
        //        }
        //    )
        //
        $indexed = $this->index_by($response, 'symbol');
        $data = $this->safe_dict($indexed, $marketId, array());
        return $this->parse_leverage($data, $market);
    }

    public function parse_leverage(array $leverage, ?array $market = null): array {
        //
        //        {
        //            "symbol" => "ETH_USDT_PERP",
        //            "leverage" => "5"
        //        }
        //
        $marketId = $this->safe_string($leverage, 'symbol');
        $leverageNum = $this->safe_number($leverage, 'leverage'); // default $leverage is 1 typically
        return array(
            'info' => $leverage,
            'symbol' => $this->safe_symbol($marketId, $market),
            'marginMode' => null,
            'longLeverage' => $leverageNum,
            'shortLeverage' => $leverageNum,
        );
    }

    public function set_leverage(int $leverage, ?string $symbol = null, $params = array ()) {
        /**
         * set the level of $leverage for a $market
         *
         * @see https://arkm.com/docs#post/account/leverage
         *
         * @param {float} $leverage the rate of $leverage
         * @param {string} $symbol unified $market $symbol
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @return {array} $response from the exchange
         */
        if ($symbol === null) {
            throw new ArgumentsRequired($this->id . ' setLeverage() requires a $symbol argument');
        }
        $this->load_markets();
        $market = $this->market($symbol);
        $leverageString = $this->number_to_string($leverage);
        $marketId = $this->safe_string($market, 'id');
        $request = array(
            'symbol' => $marketId,
            'leverage' => $leverageString,
        );
        $response = $this->v1PrivatePostAccountLeverage ($this->extend($request, $params));
        //
        // $response is just empty string
        //
        return $this->parse_leverage($response, $market);
    }

    public function fetch_positions(?array $symbols = null, $params = array ()): array {
        /**
         * fetch all open positions
         *
         * @see https://arkm.com/docs#get/account/positions
         *
         * @param {string[]|null} $symbols list of unified market $symbols
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @param {boolean} [$params->standard] whether to fetch standard contract positions
         * @return {array[]} a list of ~@link https://docs.ccxt.com/#/?id=position-structure position structures~
         */
        $this->load_markets();
        $symbols = $this->market_symbols($symbols);
        $response = $this->v1PrivateGetAccountPositions ($params);
        //
        //    array(
        //        {
        //            "subaccountId" => "0",
        //            "symbol" => "SOL_USDT_PERP",
        //            "base" => "0.037",
        //            "quote" => "-6.44614",
        //            "openBuySize" => "0",
        //            "openSellSize" => "0",
        //            "openBuyNotional" => "0",
        //            "openSellNotional" => "0",
        //            "lastUpdateReason" => "orderFill",
        //            "lastUpdateTime" => "1753903829389966",
        //            "lastUpdateId" => "250434684",
        //            "lastUpdateBaseDelta" => "0.037",
        //            "lastUpdateQuoteDelta" => "-6.44614",
        //            "breakEvenPrice" => "174.22",
        //            "markPrice" => "174.33",
        //            "value" => "6.45021",
        //            "pnl" => "0.00407",
        //            "initialMargin" => "0.645021",
        //            "maintenanceMargin" => "0.3870126",
        //            "averageEntryPrice" => "174.22"
        //        }
        //    )
        //
        return $this->parse_positions($response, $symbols);
    }

    public function parse_position(array $position, ?array $market = null) {
        //
        //        {
        //            "subaccountId" => "0",
        //            "symbol" => "SOL_USDT_PERP",
        //            "base" => "0.037",                             // negative for short $position
        //            "quote" => "-6.44614",                         // negative for long $position
        //            "openBuySize" => "0",
        //            "openSellSize" => "0",
        //            "openBuyNotional" => "0",
        //            "openSellNotional" => "0",
        //            "lastUpdateReason" => "orderFill",
        //            "lastUpdateTime" => "1753903829389966",
        //            "lastUpdateId" => "250434684",
        //            "lastUpdateBaseDelta" => "0.037",
        //            "lastUpdateQuoteDelta" => "-6.44614",
        //            "breakEvenPrice" => "174.22",
        //            "markPrice" => "174.33",
        //            "value" => "6.45021",
        //            "pnl" => "0.00407",
        //            "initialMargin" => "0.645021",
        //            "maintenanceMargin" => "0.3870126",
        //            "averageEntryPrice" => "174.22"
        //        }
        //
        $base = $this->safe_string($position, 'base');
        $baseAbs = Precise::string_abs($base);
        $isLong = Precise::string_ge($base, '0');
        $side = $isLong ? 'long' : 'short';
        $marketId = $this->safe_string($position, 'symbol');
        $notional = $this->safe_string($position, 'value');
        return $this->safe_position(array(
            'info' => $position,
            'id' => null,
            'symbol' => $this->safe_symbol($marketId, $market),
            'notional' => $this->parse_number(Precise::string_abs($notional)),
            'marginMode' => null,
            'liquidationPrice' => null,
            'entryPrice' => $this->safe_number($position, 'averageEntryPrice'),
            'unrealizedPnl' => $this->safe_number($position, 'pnl'),
            'realizedPnl' => null,
            'percentage' => null,
            'contracts' => $this->parse_number($baseAbs),
            'contractSize' => null,
            'markPrice' => $this->safe_number($position, 'markPrice'),
            'lastPrice' => null,
            'side' => $side,
            'hedged' => null,
            'timestamp' => null,
            'datetime' => null,
            'lastUpdateTimestamp' => $this->safe_integer($position, 'lastUpdateTime'),
            'maintenanceMargin' => $this->safe_number($position, 'maintenanceMargin'),
            'maintenanceMarginPercentage' => null,
            'collateral' => null,
            'initialMargin' => $this->safe_number($position, 'initialMargin'),
            'initialMarginPercentage' => null,
            'leverage' => null,
            'marginRatio' => null,
            'stopLossPrice' => null,
            'takeProfitPrice' => null,
        ));
    }

    public function withdraw(string $code, float $amount, string $address, ?string $tag = null, $params = array ()): array {
        /**
         * make a withdrawal
         *
         * @see https://arkm.com/docs#post/account/withdraw
         * @see https://arkm.com/docs#get/account/withdrawal/addresses
         *
         * @param {string} $code unified $currency $code
         * @param {float} $amount the $amount to withdraw
         * @param {string} $address the $address to withdraw to
         * @param {string} $tag
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @return {array} a ~@link https://docs.ccxt.com/#/?id=transaction-structure transaction structure~
         */
        list($tag, $params) = $this->handle_withdraw_tag_and_params($tag, $params);
        $this->load_markets();
        $withdrawalAddresses = $this->v1PrivateGetAccountWithdrawalAddresses ();
        //
        //    array(
        //        {
        //            "id" => "12345",
        //            "chain" => "ETH",
        //            "address" => "0x743f79D65EA07AA222F4a83c10dee4210A920a6e",
        //            "label" => "my_binance",
        //            "createdAt" => "1753905200074355",
        //            "updatedAt" => "1753905213464278",
        //            "confirmed" => true
        //        }
        //    )
        //
        $currency = $this->currency($code);
        $request = array(
            'symbol' => $currency['id'],
            'amount' => $this->currency_to_precision($code, $amount),
            'subaccountId' => $this->safe_integer($params, 'subAccountId', 0),
        );
        $networkCode = null;
        list($networkCode, $params) = $this->handle_network_code_and_params($params);
        if ($networkCode === null) {
            throw new ArgumentsRequired($this->id . ' withdraw() requires a "network" param');
        }
        $indexedList = $this->group_by($withdrawalAddresses, 'address');
        if (!(is_array($indexedList) && array_key_exists($address, $indexedList))) {
            throw new InvalidAddress($this->id . ' withdraw() requires an $address that has been previously added to the whitelisted addresses');
        }
        $withdrawalObjects = $indexedList[$address];
        $foundWithdrawalObject = null;
        for ($i = 0; $i < count($withdrawalObjects); $i++) {
            $withdrawalObject = $withdrawalObjects[$i];
            if ($withdrawalObject['chain'] === $networkCode) {
                $foundWithdrawalObject = $withdrawalObject;
                break;
            }
        }
        if ($foundWithdrawalObject === null) {
            throw new InvalidAddress($this->id . ' withdraw() can not find whitelisted withdrawal $address for ' . $address . ' with network ' . $networkCode);
        }
        $request['addressId'] = $this->safe_integer($foundWithdrawalObject, 'id');
        $response = $this->v1PrivatePostAccountWithdraw ($this->extend($request, $params));
        //
        // $response is a weird string like:
        //
        //    "1234709779980\\n"
        //
        $responseString = str_replace('\n', '', $response);
        $data = array( 'id' => $responseString );
        return $this->parse_transaction($data, $currency);
    }

    public function fetch_leverage_tiers(?array $symbols = null, $params = array ()): array {
        /**
         * retrieve information on the maximum leverage, and maintenance margin for trades of varying trade sizes
         *
         * @see https://arkm.com/docs#get/public/margin-schedules
         *
         * @param {string[]|null} $symbols list of unified market $symbols
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @return {array} a dictionary of ~@link https://docs.ccxt.com/#/?id=leverage-tiers-structure leverage tiers structures~, indexed by market $symbols
         */
        $this->load_markets();
        if ($symbols === null) {
            throw new ArgumentsRequired($this->id . ' fetchLeverageTiers() requires a $symbols argument');
        }
        $symbols = $this->market_symbols($symbols);
        $response = $this->v1PublicGetMarginSchedules ($params);
        //
        //    array(
        //        {
        //            "name" => "A",
        //            "bands" => [
        //                array(
        //                    "positionLimit" => "1000000",
        //                    "leverageRate" => "50",
        //                    "marginRate" => "0.02",
        //                    "rebate" => "0"
        //                ),
        //                array(
        //                    "positionLimit" => "2000000",
        //                    "leverageRate" => "25",
        //                    "marginRate" => "0.04",
        //                    "rebate" => "20000"
        //                ),
        //                array(
        //                    "positionLimit" => "5000000",
        //                    "leverageRate" => "20",
        //                    "marginRate" => "0.05",
        //                    "rebate" => "40000"
        //                }
        //            )
        //        ),
        //        {
        //            "name" => "B",
        //            ...
        //
        return $this->parse_leverage_tiers($response, $symbols);
    }

    public function parse_leverage_tiers(mixed $response, ?array $symbols = null, $marketIdKey = null): array {
        // overloaded method
        $indexed = $this->index_by($response, 'name');
        $symbols = $this->market_symbols($symbols);
        $tiers = array();
        for ($i = 0; $i < count($symbols); $i++) {
            $symbol = $symbols[$i];
            $market = $this->market($symbol);
            $marginSchedule = $this->safe_string($market['info'], 'marginSchedule');
            if ($marginSchedule === null) {
                throw new BadSymbol($this->id . ' fetchLeverageTiers() could not find $marginSchedule for ' . $symbol);
            }
            $selectedDict = $this->safe_dict($indexed, $marginSchedule, array());
            $bands = $this->safe_list($selectedDict, 'bands', array());
            $tiers[$symbol] = $this->parse_market_leverage_tiers($bands, $market);
        }
        return $tiers;
    }

    public function parse_market_leverage_tiers($info, ?array $market = null): array {
        $tiers = array();
        $brackets = $info;
        $minNotional = 0;
        for ($i = 0; $i < count($brackets); $i++) {
            $tier = $brackets[$i];
            $marketId = $this->safe_string($info, 'market');
            $market = $this->safe_market($marketId, $market, null, 'swap');
            $maxNotional = $this->safe_number($tier, 'positionLimit');
            $tiers[] = array(
                'tier' => $this->sum($i, 1),
                'symbol' => $this->safe_symbol($marketId, $market, null, 'swap'),
                'currency' => $market['linear'] ? $market['base'] : $market['quote'],
                'minNotional' => $minNotional,
                'maxNotional' => $maxNotional,
                'maintenanceMarginRate' => $this->safe_number($tier, 'marginRate'),
                'maxLeverage' => $this->safe_integer($tier, 'leverageRate'),
                'info' => $tier,
            );
            $minNotional = $maxNotional;
        }
        return $tiers;
    }

    public function find_timeframe_by_duration(?int $duration): string {
        // this method is used to find the $timeframe by $duration in seconds
        $timeframes = $this->safe_dict($this->options, 'timeframeDurations', array());
        $keys = is_array($timeframes) ? array_keys($timeframes) : array();
        for ($i = 0; $i < count($keys); $i++) {
            $timeframe = $keys[$i];
            $durationInMicroseconds = $this->safe_integer($timeframes, $timeframe);
            if ($durationInMicroseconds === $duration) {
                return $timeframe;
            }
        }
        return null;
    }

    public function sign($path, $api = 'public', $method = 'GET', $params = array (), $headers = null, $body = null) {
        $type = $this->safe_string($api, 0);
        $access = $this->safe_string($api, 1);
        $accessPart = ($access === 'public') ? $access . '/' : '';
        $query = $this->omit($params, $this->extract_params($path));
        $path = $this->implode_params($path, $params);
        $url = $this->urls['api'][$type] . '/' . $accessPart . $path;
        $queryString = '';
        if ($method === 'GET') {
            if ($query) {
                $queryString = $this->urlencode($query);
                $url .= '?' . $queryString;
            }
        }
        if ($access === 'private') {
            $this->check_required_credentials();
            $expires = ($this->milliseconds() . $this->safe_integer($this->options, 'requestExpiration', 5000)) * 1000; // need macroseconds
            if ($method === 'POST') {
                $body = $this->json($params);
            }
            if ($queryString !== '') {
                $path = $path . '?' . $queryString;
            }
            $bodyStr = ($body !== null) ? $body : '';
            $payload = $this->apiKey . (string) $expires . strtoupper($method) . '/' . $path . $bodyStr;
            $decodedSecret = base64_decode($this->secret);
            $signature = $this->hmac($this->encode($payload), $decodedSecret, 'sha256', 'base64');
            $headers = array(
                'Content-Type' => 'application/json',
                'Accept' => 'application/json',
                'Arkham-Api-Key' => $this->apiKey,
                'Arkham-Expires' => (string) $expires,
                'Arkham-Signature' => $signature,
                'Arkham-Broker-Id' => '1001',
            );
        }
        return array( 'url' => $url, 'method' => $method, 'body' => $body, 'headers' => $headers );
    }

    public function handle_errors(int $code, string $reason, string $url, string $method, array $headers, string $body, $response, $requestHeaders, $requestBody) {
        //
        // error example:
        //
        //    {
        //        "id" => "30005",
        //        "name" => "InvalidNotional",
        //        "message" => "order validation failed => invalid notional => notional 0.25 is less than min notional 1"
        //    }
        //
        $message = $this->safe_string($response, 'message');
        if ($message !== null) {
            $errorCode = $this->safe_string($response, 'id');
            $feedback = $this->id . ' ' . $body;
            $this->throw_exactly_matched_exception($this->exceptions['exact'], $errorCode, $feedback);
            $this->throw_exactly_matched_exception($this->exceptions['exact'], $message, $feedback);
            $this->throw_broadly_matched_exception($this->exceptions['broad'], $message, $feedback);
            throw new ExchangeError($this->id . ' ' . $body);
        }
        return null;
    }
}
